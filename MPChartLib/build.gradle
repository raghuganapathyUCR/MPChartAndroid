
import net.ltgt.gradle.errorprone.CheckSeverity
plugins {
    id "net.ltgt.errorprone" version "2.0.1"
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

group='com.github.philjay'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 3
        versionName '3.1.0'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true // this prevents "not mocked" error
    }
}

dependencies {
    implementation 'androidx.annotation:annotation:1.0.0'
    testImplementation 'junit:junit:4.12'
    implementation "edu.ucr.cs.riple.annotator:annotator-core:1.3.6"
    annotationProcessor "com.uber.nullaway:nullaway:0.10.10"
    errorprone "com.google.errorprone:error_prone_core:2.4.0"
    errorproneJavac "com.google.errorprone:javac:9+181-r4173-1"
}

tasks.withType(JavaCompile) {
    // remove the if condition if you want to run NullAway on test code
    if (!name.toLowerCase().contains("test")) {
        options.errorprone {
            check("NullAway", CheckSeverity.ERROR)
            check("AnnotatorScanner",CheckSeverity.ERROR)
            option("NullAway:AnnotatedPackages", "com.github.mikephil.charting")
            option("NullAway:SerializeFixMetadata", "true")
            option("NullAway:FixSerializationConfigPath", "/tmp/NullAwayFix/nullaway.xml")
            option("AnnotatorScanner:ConfigPath", "/tmp/NullAwayFix/scanner.xml")
        }
        options.compilerArgs << "-Xmaxerrs"<< "100000"
        options.compilerArgs << "-Xmaxwarns" << "100000"
    }

}


//
//task sourcesJar(type: Jar) {
//    from android.sourceSets.main.java.srcDirs
//    classifier = 'sources'
//}
//
//task javadoc(type: Javadoc) {
//    options.charSet = 'UTF-8'
//    failOnError  false
//    source = android.sourceSets.main.java.sourceFiles
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}
//
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

//artifacts {
//    archives sourcesJar
//    archives javadocJar
//}
